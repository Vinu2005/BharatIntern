import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import tensorflow as tf
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_absolute_error
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense
import yfinance as yf

# Download historical stock data
stock_symbol = "AAPL"  # Replace with your desired company symbol
data = yf.download(stock_symbol, start="2010-01-01", end="2023-01-01")
# Extract the 'Close' price column
data = data[['Close']]

# Normalize the data
scaler = MinMaxScaler()
data['Close'] = scaler.fit_transform(data['Close'].values.reshape(-1, 1))
# Define the sequence length and split ratio
sequence_length = 10
split_ratio = 0.8

# Create sequences
sequences = []
next_price = []

for i in range(len(data) - sequence_length):
    sequences.append(data.iloc[i:i+sequence_length].values)
    next_price.append(data.iloc[i+sequence_length].values)

X = np.array(sequences)
y = np.array(next_price)

# Split the data into training and testing sets
split = int(len(X) * split_ratio)
X_train, X_test = X[:split], X[split:]
y_train, y_test = y[:split], y[split:]
model = Sequential()
model.add(LSTM(50, activation='relu', input_shape=(sequence_length, 1)))
model.add(Dense(1))
model.compile(optimizer='adam', loss='mean_squared_error')

# Train the model
model.fit(X_train, y_train, epochs=100, batch_size=32)
# Predict the stock prices
y_pred = model.predict(X_test)

# Inverse transform to get actual prices
y_pred = scaler.inverse_transform(y_pred)
y_test = scaler.inverse_transform(y_test)

# Calculate Mean Absolute Error (MAE)
mae = mean_absolute_error(y_test, y_pred)
print("Mean Absolute Error:", mae)

# Plot the results
plt.figure(figsize=(12, 6))
plt.plot(y_test, label='Actual Prices', color='blue')
plt.plot(y_pred, label='Predicted Prices', color='red')
plt.title(f'Stock Price Prediction for {stock_symbol} (MAE={mae:.2f})')
plt.xlabel('Time')
plt.ylabel('Stock Price')
plt.legend()
plt.show()
